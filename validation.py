# -*- coding: utf-8 -*-
"""Validation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qdZsIlAw1rhcdb7zojGWwgcVeadBrQkl
"""

import numpy as py
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

# have to include the py file in "Files" on the side
import classes_and_functions as fcn

minerRate_list = [5,10,15,20,25,30]
#minerRate_list = [5,5,5,5,5,5]
blockSize_list = [50,55,60,65,70,75]
t_end = 30

sim=fcn.SimulationBasic(minerRate_list, blockSize_list, t_end)

sim.multiTimeSimulate()
#fcn.SimulationBasic.oneTimeSimulate("temp",minerRate,arrivalRate,blockSize)

result = sim.results[:5]


times = result[0]
num_transactions = result[1]
delays = result[2]
rateofFees = result[3]

for i in range(5):
  
  time=times[i]
  num_transaction=num_transactions[i]
  plt.step(time, num_transaction, label = "number of transactions", where = "post")
  
for i in range(5):
  time=times[i]
  delay = delays[i]
  plt.step(times, delay, label = "delay", where = "post")
  
for i in range(5):
  time=times[i]
  rateofFee = rateofFees[i]
  plt.step(times, rateofFee, label = "rate of fees collected", where = "post")
  '''
  plt.ylabel("metrics")
  plt.xlabel("Time")
  plt.legend()
  plt.title("Scenario 1: u = {0}, k = {1}".format(minerRate,blockSize))
  plt.show()'''

arrivalRate = [120]
minerRate = [20]
blockSize = [10]
t_end = 24 # simulation period:24hours

#SimulationBasic(self, minerRate_list,blockSize_list,t_end)
sim1 = fcn.SimulationBasic(minerRate, blockSize, t_end)

#oneTimeSimulate(self,minerRate,arrivalRate,blockSize)
sim1.multiTimeSimulate()

len(sim1.results[0])
print(sim1.results[0])

#test plot for one pair of u and k
result = sim1.results[0]            ##if using list of inputs, use sim1.results[k] to get access to the kth result
times = result[0]
num_transactions = result[1]
delay = result[2]
rateofFee = result[3]
minerRate,blockSize = result[4]

plt.figure(figsize=(12,8))
plt.step(times, num_transactions, label = "number of transactions", where = "post")
plt.step(times, delay, label = "delay", where = "post")
plt.step(times, rateofFee, label = "rate of fees collected", where = "post")
plt.ylabel("metrics")
plt.xlabel("Time")
plt.legend()
plt.title("Scenario 1: u = {0}, k = {1}".format(minerRate,blockSize))
plt.show()